c) Round Robin
Theory:
Round Robin: It is a primitive scheduling algorithm. it is designed especially for time sharing
systems. In this, the CPU switches between the processes. When the time quantum expired, the
CPU switches to another job. A small unit of time called a quantum or time slice. A time
quantum is generally being a circular queue new processes are added to the tail of the ready
queue.
If the process may have a CPU burst of less than one time slice then the
process release the CPU voluntarily. The scheduler will then process to next process ready queue
otherwise; the process will be put at the tail of the ready queue.
Algorithm
1: Start the process
2: Accept the number of processes in the ready Queue and time quantum (or) time slice
3: For each process in the ready Q, assign the process id and accept the CPU burst time
4: Calculate the no. of time slices for each process where
No. of time slice for process(n) = burst time process(n)/time slice
5: If the burst time is less than the time slice then the no. of time slices =1.
6: Consider the ready queue is a circular Q, calculate
(a) Waiting time for process(n) = waiting time of process(n-1) + burst time of process (n-1) +
the time difference in getting the CPU from process(n-1)
(b) Turnaround time for process(n) = waiting time of process(n) + burst time of process(n)+ the
time difference in getting CPU from process(n).
7: Calculate
(a) Average waiting time = Total waiting Time / Number of process
(b) Average Turnaround time = Total Turnaround Time / Number of process
Step 8: Stop the Process
Code:
#include<stdio.h>
void main()
{
int p[20],bt[20]={0},tat[20]={0},wt[20]={0},i,temp=0,ct[20]={0},max,stat=0,swt=0,n,tmslc,j;
float awt, atat;
printf("Enter the no of processes:");
scanf("%d",&n);
printf("Enter the processes number:");
for(i=0;i<n;i++)
{
scanf("%d",&p[i]);
}
printf("Enter the burst times:");
for(i=0;i<n;i++)
{
scanf("%d",&bt[i]);
ct[i]=bt[i];
}
printf("Enter the tmslc:");
scanf("%d",&tmslc);
max=bt[0];
for(i=1;i<n;i++)
{
if(max<bt[i])
max=bt[i];
}
for(j=0;j<(max/tmslc)+1;j++)
{
for(i=0;i<n;i++)
{
if(bt[i]!=0)
{
if(bt[i]<=tmslc)
{
tat[i]=temp+bt[i];
temp=temp+bt[i];
bt[i]=0;
}
else
{
bt[i]=bt[i]-tmslc;
temp=temp+tmslc;
}
}
}
}
for(i=0;i<n;i++)
{
wt[i]=tat[i]-ct[i];
stat+=tat[i];
swt+=wt[i];
}
atat=(float)stat/n;
awt=(float)swt/n;
printf("Process\tBT\tWT\tTAT");
printf("\n---------------------------------------");
for(i=0;i<n;i++)
{
printf("\n P%d \t%d\t%d \t%d",p[i],ct[i],wt[i],tat[i]);
}
printf("\n---------------------------------------");
printf("\n \t(AWT)%f %f(ATAT)\n",awt,atat);
printf("\n---------------------------------------");
}
OUTPUT:
Enter the no of processes:3
Enter the processes number:1
2
3
Enter the burst times:24
3
3
Enter the tmslc:4
Process BT WT TAT
---------------------------------------
P1 24 6 30
P2 3 4 7
P3 3 7 10
---------------------------------------
(AWT)5.666667 15.666667(ATAT)
---------------------------------------
--------------------------------
Process exited after 14.21 seconds with return value 40
Press any key to continue . . 
